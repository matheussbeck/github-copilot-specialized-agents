#!/usr/bin/env python3
"""
Instalador de GitHub Copilot Agents
Baixa e instala sistema de agents do GitHub em projetos locais
"""

import os
import sys
import shutil
import argparse
from pathlib import Path
from datetime import datetime
import urllib.request
import zipfile
import tempfile


class Colors:
    """Cores para output no terminal"""
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    RESET = '\033[0m'
    BOLD = '\033[1m'


def print_header(msg):
    print(f"\n{Colors.BOLD}{Colors.HEADER}{msg}{Colors.RESET}")


def print_success(msg):
    print(f"{Colors.GREEN}‚úì{Colors.RESET} {msg}")


def print_warning(msg):
    print(f"{Colors.YELLOW}‚ö†{Colors.RESET} {msg}")


def print_error(msg):
    print(f"{Colors.RED}‚úó{Colors.RESET} {msg}")


def print_info(msg):
    print(f"{Colors.BLUE}‚Ñπ{Colors.RESET} {msg}")


class CopilotAgentInstaller:
    """Gerencia instala√ß√£o do sistema de agents"""
    
    def __init__(self, target_dir: str, github_url: str, force: bool = False, backup: bool = True):
        self.target_dir = Path(target_dir).resolve()
        self.github_url = github_url
        self.force = force
        self.backup = backup
        self.temp_dir = None
        self.backup_dir = None
        
    def validate_target(self):
        """Valida diret√≥rio de destino"""
        if not self.target_dir.exists():
            print_error(f"Diret√≥rio n√£o existe: {self.target_dir}")
            return False
        
        if not self.target_dir.is_dir():
            print_error(f"Caminho n√£o √© um diret√≥rio: {self.target_dir}")
            return False
        
        print_success(f"Diret√≥rio v√°lido: {self.target_dir}")
        return True
    
    def check_existing_installation(self):
        """Verifica se j√° existe instala√ß√£o"""
        copilot_file = self.target_dir / ".github" / "copilot-instructions.md"
        copilot_dir = self.target_dir / ".copilot"
        
        exists = copilot_file.exists() or copilot_dir.exists()
        
        if exists:
            if self.force:
                print_warning("Instala√ß√£o existente ser√° sobrescrita (--force)")
                return True
            else:
                print_error("Instala√ß√£o j√° existe!")
                print_info("Use --force para sobrescrever ou --backup=false para n√£o fazer backup")
                return False
        
        return True
    
    def create_backup(self):
        """Cria backup da instala√ß√£o existente"""
        if not self.backup:
            return True
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_dir = self.target_dir / f".copilot_backup_{timestamp}"
        
        try:
            self.backup_dir.mkdir(exist_ok=True)
            
            # Backup .github/copilot-instructions.md
            copilot_file = self.target_dir / ".github" / "copilot-instructions.md"
            if copilot_file.exists():
                shutil.copy2(copilot_file, self.backup_dir / "copilot-instructions.md")
                print_success(f"Backup: copilot-instructions.md")
            
            # Backup .copilot/ directory
            copilot_dir = self.target_dir / ".copilot"
            if copilot_dir.exists():
                shutil.copytree(copilot_dir, self.backup_dir / ".copilot")
                print_success(f"Backup: .copilot/ directory")
            
            print_success(f"Backup criado em: {self.backup_dir.name}")
            return True
            
        except Exception as e:
            print_error(f"Erro ao criar backup: {e}")
            return False
    
    def download_from_github(self):
        """Baixa arquivos do GitHub"""
        print_info(f"Baixando de: {self.github_url}")
        
        try:
            # Cria diret√≥rio tempor√°rio
            self.temp_dir = Path(tempfile.mkdtemp())
            zip_path = self.temp_dir / "repo.zip"
            
            # Converte URL do repo para URL de download ZIP
            if "github.com" in self.github_url:
                # Transforma https://github.com/user/repo em download ZIP
                parts = self.github_url.rstrip('/').split('/')
                if len(parts) >= 2:
                    user = parts[-2]
                    repo = parts[-1]
                    download_url = f"https://github.com/{user}/{repo}/archive/refs/heads/main.zip"
                else:
                    print_error("URL do GitHub inv√°lida")
                    return False
            else:
                download_url = self.github_url
            
            # Baixa arquivo ZIP
            print_info("Fazendo download...")
            urllib.request.urlretrieve(download_url, zip_path)
            
            # Extrai ZIP
            print_info("Extraindo arquivos...")
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(self.temp_dir)
            
            print_success("Download conclu√≠do")
            return True
            
        except Exception as e:
            print_error(f"Erro ao baixar: {e}")
            print_info("Verifique se a URL est√° correta e se o reposit√≥rio √© p√∫blico")
            return False
    
    def install_files(self):
        """Instala arquivos no diret√≥rio de destino"""
        try:
            # Encontra diret√≥rio extra√≠do (normalmente repo-main/)
            extracted_dirs = [d for d in self.temp_dir.iterdir() if d.is_dir()]
            if not extracted_dirs:
                print_error("Nenhum diret√≥rio encontrado no arquivo baixado")
                return False
            
            source_dir = extracted_dirs[0]
            
            # Instala copilot-instructions.md
            source_file = source_dir / "copilot-instructions.md"
            if source_file.exists():
                github_dir = self.target_dir / ".github"
                github_dir.mkdir(exist_ok=True)
                
                dest_file = github_dir / "copilot-instructions.md"
                shutil.copy2(source_file, dest_file)
                print_success("Instalado: .github/copilot-instructions.md")
            else:
                print_warning("Arquivo copilot-instructions.md n√£o encontrado no repo")
            
            # Instala diret√≥rio .copilot/
            source_copilot = source_dir / ".copilot"
            if source_copilot.exists():
                dest_copilot = self.target_dir / ".copilot"
                
                # Remove destino se existir
                if dest_copilot.exists():
                    shutil.rmtree(dest_copilot)
                
                shutil.copytree(source_copilot, dest_copilot)
                
                # Conta arquivos instalados
                agent_files = list((dest_copilot / "agents").glob("*.md")) if (dest_copilot / "agents").exists() else []
                print_success(f"Instalado: .copilot/ ({len(agent_files)} agents)")
            else:
                print_warning("Diret√≥rio .copilot/ n√£o encontrado no repo")
            
            # Copia README se existir
            source_readme = source_dir / "README.md"
            if source_readme.exists():
                dest_readme = self.target_dir / ".copilot" / "README.md"
                dest_readme.parent.mkdir(exist_ok=True, parents=True)
                shutil.copy2(source_readme, dest_readme)
                print_success("Instalado: .copilot/README.md")
            
            return True
            
        except Exception as e:
            print_error(f"Erro ao instalar arquivos: {e}")
            return False
    
    def cleanup(self):
        """Remove arquivos tempor√°rios"""
        if self.temp_dir and self.temp_dir.exists():
            try:
                shutil.rmtree(self.temp_dir)
                print_info("Arquivos tempor√°rios removidos")
            except Exception as e:
                print_warning(f"N√£o foi poss√≠vel remover tempor√°rios: {e}")
    
    def rollback(self):
        """Restaura backup em caso de erro"""
        if not self.backup_dir or not self.backup_dir.exists():
            return
        
        print_warning("Restaurando backup...")
        
        try:
            # Restaura copilot-instructions.md
            backup_file = self.backup_dir / "copilot-instructions.md"
            if backup_file.exists():
                dest = self.target_dir / ".github" / "copilot-instructions.md"
                shutil.copy2(backup_file, dest)
            
            # Restaura .copilot/
            backup_copilot = self.backup_dir / ".copilot"
            if backup_copilot.exists():
                dest_copilot = self.target_dir / ".copilot"
                if dest_copilot.exists():
                    shutil.rmtree(dest_copilot)
                shutil.copytree(backup_copilot, dest_copilot)
            
            print_success("Backup restaurado")
            
        except Exception as e:
            print_error(f"Erro ao restaurar backup: {e}")
    
    def print_post_install(self):
        """Imprime instru√ß√µes p√≥s-instala√ß√£o"""
        print_header("‚ú® INSTALA√á√ÉO CONCLU√çDA!")
        
        print("\nüìã Pr√≥ximos passos:")
        print(f"   1. Abra {Colors.BOLD}.github/copilot-instructions.md{Colors.RESET}")
        print("   2. Customize com contexto do seu projeto")
        print("   3. Reinicie o VS Code")
        print("   4. Teste com coment√°rio: # @standards: este c√≥digo est√° bom?")
        
        print(f"\nüìö Documenta√ß√£o completa: {Colors.BOLD}.copilot/README.md{Colors.RESET}")
        
        if self.backup_dir:
            print(f"\nüíæ Backup salvo em: {Colors.YELLOW}{self.backup_dir.name}{Colors.RESET}")
            print("   (Pode deletar ap√≥s validar instala√ß√£o)")
    
    def install(self):
        """Executa instala√ß√£o completa"""
        print_header("üöÄ INSTALADOR DE COPILOT AGENTS")
        
        # Valida√ß√µes
        if not self.validate_target():
            return False
        
        if not self.check_existing_installation():
            return False
        
        # Backup
        if not self.create_backup():
            print_error("Falha ao criar backup. Abortando.")
            return False
        
        # Download
        if not self.download_from_github():
            self.cleanup()
            return False
        
        # Instala√ß√£o
        if not self.install_files():
            print_error("Falha na instala√ß√£o. Restaurando backup...")
            self.rollback()
            self.cleanup()
            return False
        
        # Limpeza
        self.cleanup()
        
        # Sucesso
        self.print_post_install()
        return True


def main():
    parser = argparse.ArgumentParser(
        description="Instala sistema de GitHub Copilot Agents em projeto local",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  # Instalar no diret√≥rio atual
  python install_copilot_agents.py --url https://github.com/user/copilot-agents
  
  # Instalar em projeto espec√≠fico
  python install_copilot_agents.py --target /path/to/project --url https://github.com/user/copilot-agents
  
  # For√ßar reinstala√ß√£o sem backup
  python install_copilot_agents.py --url ... --force --no-backup
        """
    )
    
    parser.add_argument(
        '--target',
        default='.',
        help='Diret√≥rio do projeto (default: diret√≥rio atual)'
    )
    
    parser.add_argument(
        '--url',
        required=True,
        help='URL do reposit√≥rio GitHub (ex: https://github.com/user/repo)'
    )
    
    parser.add_argument(
        '--force',
        action='store_true',
        help='Sobrescrever instala√ß√£o existente'
    )
    
    parser.add_argument(
        '--no-backup',
        dest='backup',
        action='store_false',
        help='N√£o criar backup de arquivos existentes'
    )
    
    args = parser.parse_args()
    
    # Executa instala√ß√£o
    installer = CopilotAgentInstaller(
        target_dir=args.target,
        github_url=args.url,
        force=args.force,
        backup=args.backup
    )
    
    success = installer.install()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()